#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int reuse(const vector<int>& fence, int left, int right) {
	if (left == right) return fence[left];

	int result = 0;
	int mid = (left + right) / 2;
	result = max(reuse(fence, left, mid), reuse(fence, mid + 1, right));

	int L = mid, R = mid + 1;
	int height = min(fence[L], fence[R]);
	result = max(result, 2 * height);
	while (L > left || R < right) {
		if ((fence[L - 1] >= fence[R + 1] || R==right) && L > left) {
			L--;
			height = min(fence[L], height);
		}
		else if ((fence[L - 1] < fence[R + 1] || L==left) && R < right) {
			R++;
			height = min(fence[R], height);
		}
		
		result = max(result, (R - L + 1) * height);
	}
	return result;
}

int main() {
	int C;
	cin >> C;
	while (C--) {
		int N;
		cin >> N;
		vector<int> fence;
		int temp;
		for (int i = 0; i < N; i++) {
			cin >> temp;
			fence.push_back(temp);
		}
		cout << reuse(fence, 0, fence.size()-1) << "\n";
	}
}