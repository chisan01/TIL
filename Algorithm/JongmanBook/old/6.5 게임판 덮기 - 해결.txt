#include <iostream>

using namespace std;

// 게임판. char string[10]으로 하니깐 결과는 잘 나와도 사이트에서 채점하면 런타임 오류 나옴.
char board[10][20];

// 남은 흰 칸 중 가장 순서가 빠른 좌표 반환. 흰 칸이 없을시 true 리턴.
bool isFull(int H, int W, int&x, int&y) {
	for (int i = 0; i < H; i++) {
		for (int j = 0; j < W; j++) {
			if (board[i][j] == '.') {
				y = i; x = j;
				return false;
			}
		}
	}
	return true;
}

//  0  1  2
//  7     3
//  6  5  4
// 8: 1-3, 9: 3-5, 10 :5-7, 11 :7-1
int x_pos[13] = { -1, 0, 1, 1, 1, 0, -1, -1, 0, 1, 0, -1, 0 };
int y_pos[13] = { -1, -1, -1, 0, 1, 1, 1, 0, -1, 0, 1, 0, -1 };

// 해당 칸을 포함해서 블럭을 놓을 수 있는지 체크하는 함수.
bool isBlock(int H, int W, int x, int y, int i) {
	int x1, x2, y1, y2;
	x1 = x + x_pos[i];
	y1 = y + y_pos[i];
	if (i == 7) {
		x2 = x + x_pos[0];
		y2 = y + y_pos[0];
	}
	else {
		x2 = x + x_pos[i+1];
		y2 = y + y_pos[i+1];
	}
	if (x1<0 || x1>W - 1 || y1<0 || y1>H - 1) return false;
	if (x2<0 || x2>W - 1 || y2<0 || y2>H - 1) return false;

	if (board[y1][x1] == '.' && board[y2][x2] == '.')
		return true;
	else
		return false;
}

void addBlock(int x, int y, int i) {
	int x1, x2, y1, y2;
	x1 = x + x_pos[i];
	y1 = y + y_pos[i];
	if (i == 7) {
		x2 = x + x_pos[0];
		y2 = y + y_pos[0];
	}
	else {
		x2 = x + x_pos[i + 1];
		y2 = y + y_pos[i + 1];
	}
	board[y][x] = '#';
	board[y1][x1] = '#';
	board[y2][x2] = '#';
}

void delBlock(int x, int y, int i) {
	int x1, x2, y1, y2;
	x1 = x + x_pos[i];
	y1 = y + y_pos[i];
	if (i == 7) {
		x2 = x + x_pos[0];
		y2 = y + y_pos[0];
	}
	else {
		x2 = x + x_pos[i + 1];
		y2 = y + y_pos[i + 1];
	}
	board[y][x] = '.';
	board[y1][x1] = '.';
	board[y2][x2] = '.';
}


// 검사 함수
int number_of_cases(int H, int W) {
	int result = 0; // isBlock이 되는 경우가 없을시 자동으로 0리턴. 예외 처리 따로 해줄 필요 x
	int x, y;
	if (isFull(H, W, x, y)) return 1; // 기본 case

	for (int i = 0; i < 12; i++) {
		if (isBlock(H, W, x, y, i)) {
			addBlock(x, y, i);
			result += number_of_cases(H, W);
			delBlock(x, y, i);
		}
	}
	return result;
}

int main() {
	int testcase_n = 0;
	cin >> testcase_n;
	for (int i = 0; i < testcase_n; i++) {
		int H, W;
		cin >> H >> W;
		for (int j = 0; j < H; j++) {
			cin >> board[j];
		}
		cout << number_of_cases(H, W) << "\n";
	}
}