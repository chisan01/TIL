#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct myList LIST;

struct myList {
	char str;
	struct myList* next;
};

LIST* head = NULL;
LIST* tail = NULL;

void input(char istr);
void print();
void deallocate();
void bomb(char* str);
void delete(char dstr);

int main() {
	int n = 0;
	char temp[1000000];
	char temp2[36];

	//printf("문자열을 입력하세요: ");
	scanf("%s", temp);

	while (*(temp + n) != NULL) {
		input(*(temp + n));
		n++;
	}

	//printf("폭발 문자열 입력: ");
	scanf("%s", temp2);
	bomb(temp2);

	print();
	deallocate();
}

void input(char istr) {
	LIST* newlist;
	newlist = (LIST*)malloc(sizeof(LIST));
	newlist->str = istr;

	newlist->next = NULL;
	if (head == NULL) {
		head = newlist;
		tail = newlist;
	}
	else {
		tail->next = newlist;
		tail = newlist;
	}
}

void print() {
	LIST* temp = head;
	//printf("결과: ");
	if (head == NULL)
		printf("FRULA");
	else {
		while (temp != NULL) {
			printf("%c", temp->str);
			temp = temp->next;
		}
	}
}

void deallocate() {
	LIST* temp = head;
	while (temp != NULL) {
		temp = temp->next;
		free(head);
		head = temp;
	}
}

void bomb(char* str) {
	int n = 0;
	while (*(str + n) != NULL) {
		delete(*(str + n));
		n++;
	}
}

void delete(char dstr) {
	LIST* search = head;
	LIST* previous = NULL;
	while (search != NULL) {
		if (search->str == dstr) {
			if (search == head) {
				head = search->next;
				free(search);
				search = head;
			}
			else {
				previous->next = search->next;
				free(search);
				search = previous->next;
			}
		}
		else {
			previous = search;
			search = search->next;
		}
	}
}