#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

bool cmp_str(string s1, string s2) {
	if (s1.size() < s2.size()) {
		return true;
	}
	else if (s1.size() == s2.size()) {
		if (s1.compare(s2) < 0) {
			return true;
		}
	}
	return false;
}

void merge(string* wordlist, int min_1, int max_1, int min_2, int max_2, int size) {
	int p_a = min_1;
	int p_b = min_2;
	int p_c = 0;
	string* temp = new string[size];

	while (p_a <= max_1 && p_b <= max_2) {
		if (cmp_str(wordlist[p_a], wordlist[p_b])) {
			temp[p_c] = wordlist[p_a];
			p_a++;
		}
		else {
			temp[p_c] = wordlist[p_b];
			p_b++;
		}
		p_c++;
	}
	if (p_a <= max_1) {
		for (int i = p_a; i <= max_1; i++) {
			temp[p_c] = wordlist[i];
			p_c++;
		}
	}
	else {
		for (int i = p_b; i <= max_2; i++) {
			temp[p_c] = wordlist[i];
			p_c++;
		}
	}

	for (int i = 0; i < size; i++) {
		wordlist[min_1 + i] = temp[i];
	}
	delete[] temp;
}

void merge_sort(string* wordlist, int left, int right) {
	
	int middle = left + (right - left + 1) / 2;
	if (right <= left) return;

	merge_sort(wordlist, left, middle-1);
	merge_sort(wordlist, middle, right);
	merge(wordlist, left, middle-1, middle, right, right-left+1);
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int n;
	cin >> n;
	string* wordlist = new string[n];
	for(int i=0; i<n; i++) {
		string s;
		cin >> s;
		wordlist[i] = s;
	}

	merge_sort(wordlist, 0, n-1);
	for (int i = 0; i < n; i++) {
		cout << wordlist[i] << "\n";
	}
	delete[] wordlist;
}